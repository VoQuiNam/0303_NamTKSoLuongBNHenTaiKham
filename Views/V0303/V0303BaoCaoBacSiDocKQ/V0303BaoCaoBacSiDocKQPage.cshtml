

<head>
    <link href="~/dist/css/CSS0303/CSS0303TKSoLuongBNHenTaiKham.css" rel="stylesheet" />
    <link href="~/dist/lib/bootstrap-datepicker-1.10.0/dist/css/bootstrap-datepicker.min.css" rel="stylesheet" />
    <link href="~/dist/lib/toastr/toastr.min.css" rel="stylesheet" />
</head>
<style>
    .truncate-text {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: calc(100% - 40px);
        display: block; /* ✅ đổi từ inline-block sang block để ::after hoạt động */
        position: relative; /* ✅ cần cho tooltip */
    }

    .has-tooltip {
        position: relative;
        display: block; /* ✅ đảm bảo ::after hoạt động */
    }

        .has-tooltip:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            padding: 5px 10px;
            background-color: #333;
            color: #fff;
            border-radius: 4px;
            font-size: 14px;
            white-space: nowrap;
            z-index: 1000;
            pointer-events: none;
            margin-bottom: 5px;
            opacity: 1;
        }


    mark {
        background-color: #ffeb3b; /* hoặc màu bạn thích */
        padding: 0;
        margin: 0;
        font-weight: inherit;
        font-size: inherit;
        letter-spacing: normal;
        word-spacing: normal;
    }

    .list-group-item.active .text-muted {
        color: #fff !important;
    }



</style>


<div class="card p-1">
    <div class="container_goiKham">
        <div class="container_goiKham left">
            <div class="row" style="padding:0;">
                <div style="width: 100%; padding:0;">
                    <label class="form-label">Giai đoạn</label>
                    <select id="selectGiaiDoan" class="form-select">
                        <option value="Nam">Năm</option>
                        <option value="Quy">Quý</option>
                        <option value="Thang">Tháng</option>
                        <option value="Ngay" selected>Ngày</option>
                    </select>
                </div>
            </div>

            <div id="selectContainer"
                 class="d-flex justify-content-between align-items-center ">
            </div>

            <div class="row" style="padding:0;">
                <div style="width: 100%;padding:0;">
                    <label class="form-label">Từ ngày</label>
                    <div class="input-group">
                        <input type="text"
                               class="form-control date-input"
                               id="tuNgayDesktop"
                               name="TuNgay"
                               value="@DateTime.Now.ToString("dd-MM-yyyy")"
                               placeholder="dd-mm-yyyy"
                               autocomplete="off" />
                        <span class="input-group-text cursor-pointer datepicker-trigger">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#6c757d">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                        </span>
                    </div>
                    <span class="text-danger"></span>
                </div>

                <div style="width: 100%; margin-bottom:8px;padding:0;">
                    <label class="form-label">Đến ngày</label>
                    <div class="input-group">
                        <input type="text"
                               class="form-control date-input"
                               id="denNgayDesktop"
                               name="DenNgay"
                               value="@DateTime.Now.ToString("dd-MM-yyyy")"
                               placeholder="dd-mm-yyyy"
                               autocomplete="off" />
                        <span class="input-group-text cursor-pointer datepicker-trigger">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#6c757d">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                        </span>
                    </div>
                    <span class="text-danger"></span>
                </div>

                <!-- Dropdown Khoa -->
                <div style="width: 100%; margin-bottom:8px;padding:0;">
                        <label class="form-label">Khoa</label>
                        <div class="position-relative">
                            <input type="text" id="searchKhoa" class="form-control" autocomplete="off">
                            <input type="hidden" id="selectedKhoaId" name="KhoaId">
                            <div id="dropdownKhoa"
                             class="dropdown-menu show"
                             style="display: none; position: absolute; width: 100%; z-index: 1055;
            max-height: 200px; overflow-y: auto; overflow-x: hidden; font-size: 1rem;
            background: white; border: 1px solid #ccc;
            box-shadow: 0 2px 6px rgba(0,0,0,0.15);">
                            </div>
                        </div>
                </div>

                <!-- Dropdown Phòng buồng -->
                <div style="width: 100%; margin-bottom:8px;padding:0;">
                        <label class="form-label">Phòng buồng</label>
                        <div class="position-relative">
                            <input type="text" id="searchPhong" class="form-control" autocomplete="off">
                            <input type="hidden" id="selectedPhongId" name="PhongId">
                            <div id="dropdownPhong"
                                 class="list-group position-absolute w-100"
                             style="display: none; position: absolute; width: 100%; z-index: 1055;
            max-height: 200px; overflow-y: auto; overflow-x: hidden; font-size: 1rem;
            background: white; border: 1px solid #ccc;
            box-shadow: 0 2px 6px rgba(0,0,0,0.15);">
                            </div>
                        </div>
                </div>


                <label style="padding:0;">
                    <button class="btnFilterBacSi btn btn-outline-primary mb-3" style="margin: 2px !important;">
                        <i class="bi bi-funnel"></i> Lọc danh sách
                    </button>
                </label>
            </div>

            <div class="row export-buttons">
                <button id="btnExportPDFGoiKham" class="btnExportPDFDesktop btn btn-outline-danger mb-3">
                    Xuất PDF
                </button>
                <button id="btnExportExcelGoiKham" class="btnExportExcel btn btn-outline-success mb-3">
                    Xuất Excel
                </button>
            </div>
        </div>

        <div class="container_goiKham right">
            <div id="loadingSpinner" class="text-center" style="display: none; margin: 20px 0;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Đang tải dữ liệu...</p>
            </div>

            <div class="table-wrapper">
                <table style="width:100%; margin: 0; table-layout: fixed; min-width: 1200px;" cellpadding="8">
                    <thead class="table-secondary">
                        <tr>
                            <th class="text-center" style="width:6%;">STT</th>
                            <th class="text-center" style="width:30%;">Bác sĩ chỉ định</th>
                            <th class="text-center" style="width:10%;">Thu phí</th>
                            <th class="text-center" style="width:10%;">BHYT</th>
                            <th class="text-center" style="width:10%;">Nợ</th>
                            <th class="text-center" style="width:10%;">Miễn giảm</th>
                            <th class="text-center" style="width:10%;">Tổng số ca</th>
                        </tr>
                    </thead>
                    <tbody id="tableBody">

                    </tbody>
                </table>
            </div>

            <div class="phan_trang">
                <div class="d-flex">
                    <label name="pageSizeSelect" class="form-label" style="font-size:1rem !important;">Số bản ghi mỗi trang:</label>
                    <select id="pageSizeSelect" style="font-size:1rem !important;" class="form-select">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
                <div style="display:flex; align-items:center; ">
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center" id="pagination">
                        </ul>
                    </nav>
                    <div class="text-center" style="margin-left: 2px">
                        <span id="paginationContainer"></span>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script src="~/dist/lib/toastr/toastr.min.js" asp-append-version="true" defer></script>
    <script src="~/dist/lib/bootstrap-datepicker-1.10.0/dist/js/bootstrap-datepicker.min.js" asp-append-version="true" defer></script>
    <script src="~/dist/lib/bootstrap-datepicker-1.10.0/dist/locales/bootstrap-datepicker.vi.min.js" asp-append-version="true" defer></script>
    <script src="~/dist/js/J0303/J0303BaoCaoBacSiDocKQ.js" asp-append-version="true" defer></script>


    <script>
        $(document).ready(function() {
            $('.date-input').datepicker({
                dateFormat: 'dd-mm-yy',
            });

            function parseDate(dateStr) {
                const [day, month, year] = dateStr.split('-').map(Number);
                return new Date(year, month - 1, day);
            }

            function autoAdjustDates() {
                const tuNgayStr = $('#tuNgayDesktop').val();
                const denNgayStr = $('#denNgayDesktop').val();

                if (tuNgayStr && denNgayStr) {
                    try {
                        const tuNgay = parseDate(tuNgayStr);
                        const denNgay = parseDate(denNgayStr);

                        if (tuNgay > denNgay) {
                            $('#tuNgayDesktop').val(denNgayStr);
                            $('#tuNgayDesktop').addClass('highlight-adjust');
                            setTimeout(() => $('#tuNgayDesktop').removeClass('highlight-adjust'), 1000);
                        }
                    } catch (e) {
                        console.error("Lỗi định dạng ngày", e);
                    }
                }
            }

            $('#tuNgayDesktop, #denNgayDesktop').on('input change propertychange paste', function() {
                const tuNgayStr = $('#tuNgayDesktop').val();
                const denNgayStr = $('#denNgayDesktop').val();
                if (tuNgayStr.length === 10 && denNgayStr.length === 10) {
                    setTimeout(autoAdjustDates, 10);
                }
            });

            $('.datepicker-trigger').click(function() {
                setTimeout(autoAdjustDates, 100);
            });
        });

                $('#selectGiaiDoan').change(function () {
            const selectedValue = $(this).val();
            const container = $('#selectContainer');
            container.empty();

            if (selectedValue === 'Nam' || selectedValue === 'Ngay') {
                container.css('justify-content', 'flex-start');
            } else if (selectedValue === 'Quy' || selectedValue === 'Thang') {
                container.css('justify-content', 'space-around');
            }

            const currentYear = new Date().getFullYear();
            const currentMonth = new Date().getMonth() + 1;
            const currentQuy = Math.ceil(currentMonth / 3);


            function createDropdownInput(id, label, values, defaultValue, onSelect, length = 10) {
                const html = `
                    <div data-dropdown-wrapper style="width: 45%; position: relative;">
                        <label class="form-label">${label}</label>
                        <input type="number" class="form-control" id="${id}" value="${defaultValue}" oninput="if(this.value.length > ${length}) this.value = this.value.slice(0, ${length});"  autocomplete="off">
                        <div id="${id}Dropdown"
                            style="display:none; position:absolute; top:100%; left:0; width:100%;
                            max-height:200px; overflow-y:auto; z-index:9999; background:white;
                            border:1px solid rgba(0,0,0,.15); border-radius:4px;
                            box-shadow:0 6px 12px rgba(0,0,0,.175);">
                        </div>
                    </div>
                `;
                container.append(html);

                const $input = $('#' + id);
                const $dropdown = $('#' + id + 'Dropdown');
                let currentHighlightIndex = -1;

                function highlightCurrentItem() {
                    const items = $dropdown.find('.dropdown-item');
                    items.removeClass('active bg-primary text-white');
                    if (currentHighlightIndex >= 0 && currentHighlightIndex < items.length) {
                        items.eq(currentHighlightIndex).addClass('active bg-primary text-white');
                        const item = items.eq(currentHighlightIndex)[0];
                        if (item) item.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                    }
                }

                function renderList(filter = '') {
                    $dropdown.empty();
                    currentHighlightIndex = -1;

                    const typedVal = parseInt($input.val(), 10);
                    const typedIsAllowed = Number.isFinite(typedVal) && (values.includes(typedVal) || id === 'yearInput');


                    let highlightVal = typedVal;
                    if ((id === 'quyInput' || id === 'thangInput') &&
                        (!Number.isFinite(typedVal) ||
                            (id === 'quyInput' && (typedVal < 1 || typedVal > 4)) ||
                            (id === 'thangInput' && (typedVal < 1 || typedVal > 12)))) {

                        const now = new Date();
                        if (id === 'quyInput') {
                            highlightVal = Math.ceil((now.getMonth() + 1) / 3);
                        } else {
                            highlightVal = now.getMonth() + 1;
                        }
                    }

                    let filteredValues = values.filter(v => !filter || v.toString().includes(filter));
                    if (filteredValues.length === 0 && id === 'yearInput') {
                        if (Number.isFinite(typedVal)) {
                            filteredValues = [typedVal];
                        } else {
                            filteredValues = values.slice();
                        }
                    } else if (filteredValues.length === 0) {
                        filteredValues = values.slice();
                    }

                    filteredValues.forEach((val, index) => {
                        const isSelected = Number.isFinite(highlightVal) && val === highlightVal;
                        const item = $(`
                    <a href="#" class="dropdown-item ${isSelected ? 'active bg-primary text-white' : ''}"
                       data-val="${val}" data-index="${index}"
                       style="padding:8px 16px; display:block; text-decoration:none; color:#333; cursor:pointer;">
                       ${val}
                    </a>
                `);
                        item.on('click', function (e) {
                            e.preventDefault();
                            selectItem(val);
                        });
                        item.on('mouseenter', function () {
                            currentHighlightIndex = index;
                            highlightCurrentItem();
                        });
                        $dropdown.append(item);
                        if (isSelected) currentHighlightIndex = index;
                    });

                    const items = $dropdown.find('.dropdown-item');
                    if (currentHighlightIndex === -1 && items.length) {
                        currentHighlightIndex = 0;
                    }
                    highlightCurrentItem();
                }

                function selectItem(val) {
                    $input.val(val);
                    $dropdown.hide();
                    if (onSelect) onSelect(val);
                }

                $input.on('focus click', function () {
                    renderList();
                    $dropdown.show();
                });

                $input.on('input', function () {
                    renderList($(this).val());
                    $dropdown.show();
                });

                $input.on('keydown', function (e) {
                    const items = $dropdown.find('.dropdown-item');
                    if (!items.length) return;

                    const key = e.key;
                    const isUp = key === 'ArrowUp';
                    const isDown = key === 'ArrowDown';
                    const isEnter = key === 'Enter';
                    const isEscape = key === 'Escape';
                    const isTab = key === 'Tab';

                    if (isUp || isDown || isEnter || isEscape || isTab) e.preventDefault();

                    if (isUp) {
                        currentHighlightIndex = (currentHighlightIndex <= 0) ? items.length - 1 : currentHighlightIndex - 1;
                        highlightCurrentItem();
                        return;
                    }

                    if (isDown) {
                        currentHighlightIndex = (currentHighlightIndex >= items.length - 1) ? 0 : currentHighlightIndex + 1;
                        highlightCurrentItem();
                        return;
                    }

                    if (isEnter && currentHighlightIndex >= 0) {
                        const val = parseInt(items.eq(currentHighlightIndex).data('val'), 10);
                        selectItem(val);
                        return;
                    }

                    if (isEscape) {
                        $dropdown.hide();
                        return;
                    }

                    if (isTab) {
                        if (currentHighlightIndex >= 0) {
                            const val = parseInt(items.eq(currentHighlightIndex).data('val'), 10);
                            selectItem(val);
                        }
                        return;
                    }
                });

                        $input.on('keypress', function (e) {
            const invalidChars = ['e', 'E', '+', '-', '.', ','];
            if (invalidChars.includes(e.key)) {
                e.preventDefault();
            }
        });


                $(document).off('click.dropdown-' + id).on('click.dropdown-' + id, function (e) {
                    if (!$(e.target).closest('[data-dropdown-wrapper]').length) {
                        $dropdown.hide();
                    }
                });
            }

            function formatDate(date) {
                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                return `${day}-${month}-${year}`;
            }

            function getMonthDateRange(year, month) {
                const startDate = new Date(year, month - 1, 1);
                const endDate = new Date(year, month, 0);
                return { start: startDate, end: endDate };
            }

            function highlightYearInDropdown(year) {
                $('#yearInputDropdown').find('.dropdown-item').removeClass('active bg-primary text-white');
                const yearItem = $('#yearInputDropdown').find(`[data-val="${year}"]`);
                if (yearItem.length) {
                    yearItem.addClass('active bg-primary text-white');
                    yearItem[0].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                }
            }

            function updateDates() {
                let yearRaw = parseInt($('#yearInput').val(), 10);
                let year = Number.isFinite(yearRaw) ? yearRaw : currentYear;

                if (year < 0 || year > currentYear) {
                    year = currentYear;
                    $('#yearInput').val(currentYear);
                    highlightYearInDropdown(currentYear);
                }

                if (selectedValue === 'Nam') {
                    $('#tuNgayDesktop').val(`01-01-${year}`);
                    $('#denNgayDesktop').val(`31-12-${year}`);
                }
                else if (selectedValue === 'Quy') {
                    let quy = parseInt($('#quyInput').val(), 10);
                    if (!Number.isFinite(quy)) quy = currentQuy;
                    if (quy < 1) quy = 1;
                    if (quy > 4) quy = 4;
                    $('#quyInput').val(quy);

                    const startMonth = (quy - 1) * 3 + 1;
                    const endMonth = startMonth + 2;
                    $('#tuNgayDesktop').val(formatDate(new Date(year, startMonth - 1, 1)));
                    $('#denNgayDesktop').val(formatDate(new Date(year, endMonth, 0)));
                }
                else if (selectedValue === 'Thang') {
                    let month = parseInt($('#thangInput').val(), 10);
                    if (!Number.isFinite(month)) month = currentMonth;
                    if (month < 1) month = 1;
                    if (month > 12) month = 12;
                    $('#thangInput').val(month);

                    const { start, end } = getMonthDateRange(year, month);
                    $('#tuNgayDesktop').val(formatDate(start));
                    $('#denNgayDesktop').val(formatDate(end));
                }
                else if (selectedValue === 'Ngay') {
                    const today = new Date(Date.now());
                    const todayStr = formatDate(today);
                    $('#tuNgayDesktop').val(todayStr);
                    $('#denNgayDesktop').val(todayStr);
                }

                if (selectedValue === 'Nam' || selectedValue === 'Quy' || selectedValue === 'Thang') {
                    $('#tuNgayDesktop, #denNgayDesktop').prop('disabled', true);
                } else {
                    $('#tuNgayDesktop, #denNgayDesktop').prop('disabled', false);
                }

                $('#tuNgayDesktop').datepicker('setDate', $('#tuNgayDesktop').val());
                $('#denNgayDesktop').datepicker('setDate', $('#denNgayDesktop').val());
            }

            const startYear = 2000;
            const yearOptions = Array.from({ length: currentYear - startYear + 1 }, (_, i) => startYear + i);
            createDropdownInput('yearInput', 'Năm', yearOptions, currentYear, updateDates, 4);
            $(document)
                .off('blur', '#yearInput')
                .on('blur', '#yearInput', function () {
                    let val = parseInt($(this).val(), 10);
                    if (!Number.isFinite(val) || val > currentYear || val < 0) val = currentYear;
                    $(this).val(val);

                    $('#quyInputDropdown').find('.dropdown-item').removeClass('active bg-primary text-white');
                    $('#quyInputDropdown').find(`[data-val="${val}"]`).addClass('active bg-primary text-white');

                    updateDates();
                });

            if (selectedValue === 'Quy') {
                createDropdownInput('quyInput', 'Quý', [1, 2, 3, 4], currentQuy, updateDates, 1);

                $(document)
                    .off('blur', '#quyInput')
                    .on('blur', '#quyInput', function () {
                        let val = parseInt($(this).val(), 10);
                        if (!Number.isFinite(val) || val < 1 || val > 4) val = currentQuy;
                        $(this).val(val);

                        $('#quyInputDropdown').find('.dropdown-item').removeClass('active bg-primary text-white');
                        $('#quyInputDropdown').find(`[data-val="${val}"]`).addClass('active bg-primary text-white');

                        updateDates();
                    });
            }

            else if (selectedValue === 'Thang') {
                createDropdownInput('thangInput', 'Tháng', Array.from({ length: 12 }, (_, i) => i + 1), currentMonth, updateDates, 2);

                $(document)
                    .off('blur', '#thangInput')
                    .on('blur', '#thangInput', function () {
                        let val = parseInt($(this).val(), 10);
                        if (!Number.isFinite(val) || val < 1 || val > 12) val = currentMonth;
                        $(this).val(val);

                        $('#thangInputDropdown').find('.dropdown-item').removeClass('active bg-primary text-white');
                        $('#thangInputDropdown').find(`[data-val="${val}"]`).addClass('active bg-primary text-white');

                        updateDates();
                    });
            }

            else if (selectedValue === 'Ngay') {
                container.empty();
            }

            updateDates();
        });
    </script>
}








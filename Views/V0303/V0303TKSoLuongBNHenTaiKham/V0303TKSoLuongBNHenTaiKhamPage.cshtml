@{
    ViewData["NonSixOs"] = true;
}


@model List<Nam_ThongKeSoLuongBNHenTaiKham.Models.M0303.M0303TKSoLuongBNHenKham>
<head> 
    <link href="~/dist/css/CSS0303/CSS0303TKSoLuongBNHenTaiKham.css" rel="stylesheet" />
    <link href="~/dist/lib/bootstrap-datepicker-1.10.0/dist/css/bootstrap-datepicker.min.css" rel="stylesheet" />
</head>


<div class="card p-1">
    <div class="container_goiKham">
        <div class="container_goiKham left">
            <div class="row" style="padding:0;">
                <div style="width: 100%; padding:0;">
                    <label class="form-label">Giai đoạn</label>
                    <select id="selectGiaiDoan" class="form-select">
                       
                        <option value="Nam">Năm</option>
                        <option value="Quy">Quý</option>
                        <option value="Thang">Tháng</option>
                        <option value="Ngay" selected>Ngày</option>
                    </select>
                </div>
            </div>

            <div id="selectContainer"
                class="d-flex justify-content-between align-items-center ">
            </div>

            <div class="row" style="padding:0;">
                <div style="width: 100%;padding:0;">
                    <label class="form-label">Từ ngày</label>
                    <div class="input-group">
                        <input type="text"
                               class="form-control date-input"
                               id="tuNgayDesktop"
                               name="TuNgay"
                               value="@DateTime.Now.ToString("dd-MM-yyyy")"
                               placeholder="dd-mm-yyyy"
                               autocomplete="off" />
                        <span class="input-group-text cursor-pointer datepicker-trigger">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#6c757d">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                        </span>
                    </div>
                    <span class="text-danger"></span>
                </div>
                <div style="width: 100%; margin-bottom:8px;padding:0;">
                    <label class="form-label">Đến ngày</label>
                    <div class="input-group">
                        <input type="text"
                               class="form-control date-input"
                               id="denNgayDesktop"
                               name="DenNgay"
                               value="@DateTime.Now.ToString("dd-MM-yyyy")"
                               placeholder="dd-mm-yyyy"
                               autocomplete="off" />
                        <span class="input-group-text cursor-pointer datepicker-trigger">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#6c757d">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                        </span>
                    </div>
                    <span class="text-danger"></span>
                </div>
                <label style="padding:0;">
                    <button class="btnFilter btn btn-outline-primary mb-3" @(ViewBag.quyenvaitro.Xem ? "" : "disabled")>
                        <i class="bi bi-funnel"></i> Lọc danh sách
                    </button>
                </label>
            </div>
            <div class="row export-buttons">
                <button id="btnExportPDFGoiKham" class="btnExportPDFDesktop btn btn-outline-danger mb-3" @(ViewBag.quyenvaitro.Xuat ? "" : "disabled")>
                    Xuất PDF
                </button>
                <button id="btnExportExcelGoiKham" class="btnExportExcel btn btn-outline-success mb-3" @(ViewBag.quyenvaitro.Xuat ? "" : "disabled")>
                    Xuất Excel
                </button>
            </div>

        </div>
        <div class="container_goiKham right">
            <div id="loadingSpinner" class="text-center" style="display: none; margin: 20px 0;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Đang tải dữ liệu...</p>
            </div>

            <div class="table-wrapper" style="max-height: 450px;">
                <table style="width:100%; margin: 0; table-layout: fixed; min-width: 1800px;" cellpadding="8">

                    <thead>
                        <tr>
                            <th class="text-center" style="width: 50px;">STT
                            <th class="text-center">Mã y tế</th>
                            <th class="text-center">Họ và tên</th>
                            <th class="text-center">Năm sinh</th>
                            <th class="text-center">Giới tính</th>
                            <th class="text-center">Quốc tịch</th>
                            <th class="text-center">Cccd/Passport</th>
                            <th class="text-center">SĐT</th>
                            <th class="text-center">Ngày hẹn khám</th>
                            <th class="text-center">Bác sĩ hẹn khám</th>
                            <th class="text-center">Nhắc hẹn</th>
                            <th class="text-center">Ghi chú</th>
                        </tr>
                    </thead>
                    <tbody id="tableBody">
                        @if (ViewBag.IsFiltered == true)
                        {
                            for (int i = 0; i < Model.Count; i++)
                            {
                                var item = Model[i];
                                <tr>
                                    <td class="text-center" style="width: 50px;">@((i + 1))</td>
                                    <td class="text-center">@item.MaYTe</td>
                                    <td class="text-start" style="max-width: 150px;">@item.HoVaTen</td>
                                    <td class="text-center">@item.NamSinh</td>
                                    <td class="text-start">@item.GioiTinh</td>
                                    <td class="text-start">@item.QuocTich</td>
                                    <td class="text-center" style="max-width: 140px;">@item.CCCD_PASSPORT</td>
                                    <td class="text-center" style="max-width: 120px;">@item.SDT</td>
                                    <td class="text-center">@item.NgayHenKham?.ToString("dd-MM-yyyy")</td>
                                    <td class="text-start" style="max-width: 150px;">@item.BacSiHenKham</td>
                                    <td class="text-start">@item.NhacHen</td>
                                    <td style="max-width: 150px;">@item.GhiChu</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="12" class="text-center text-muted">Vui lòng chọn bộ lọc để hiển thị dữ liệu.</td>
                            </tr>
                        }

                    </tbody>

                </table>

            </div>
            <div class="phan_trang">
                <div class="d-flex">
                    <label name="pageSizeSelect" class="form-label" style="font-size:1rem !important;">Số bản ghi mỗi trang:</label>
                    <select id="pageSizeSelect"  style="font-size:1rem !important;" class="form-select">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
                <div style="display:flex; align-items:center; ">
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center" id="pagination">
                        </ul>
                    </nav>
                    <div class="text-center" style="margin-left: 2px">
                        <span id="paginationContainer"></span>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script src="~/dist/lib/bootstrap-datepicker-1.10.0/dist/js/bootstrap-datepicker.min.js" asp-append-version="true" defer></script>
    <script src="~/dist/lib/bootstrap-datepicker-1.10.0/dist/locales/bootstrap-datepicker.vi.min.js" asp-append-version="true" defer></script>
    <script src="~/dist/js/J0303/J0303TKSoLuongBNHenTaiKham.js" asp-append-version="true" defer></script>
   

    <script>
        $(document).ready(function() {
            $('.date-input').datepicker({
                dateFormat: 'dd-mm-yy',
            });

            function parseDate(dateStr) {
                const [day, month, year] = dateStr.split('-').map(Number);
                return new Date(year, month - 1, day);
            }

            function autoAdjustDates() {
                const tuNgayStr = $('#tuNgayDesktop').val();
                const denNgayStr = $('#denNgayDesktop').val();

                if (tuNgayStr && denNgayStr) {
                    try {
                        const tuNgay = parseDate(tuNgayStr);
                        const denNgay = parseDate(denNgayStr);

                        if (tuNgay > denNgay) {
                            $('#tuNgayDesktop').val(denNgayStr);
                            $('#tuNgayDesktop').addClass('highlight-adjust');
                            setTimeout(() => $('#tuNgayDesktop').removeClass('highlight-adjust'), 1000);
                        }
                    } catch (e) {
                        console.error("Lỗi định dạng ngày", e);
                    }
                }
            }

            $('#tuNgayDesktop, #denNgayDesktop').on('input change propertychange paste', function() {
                const tuNgayStr = $('#tuNgayDesktop').val();
                const denNgayStr = $('#denNgayDesktop').val();
                if (tuNgayStr.length === 10 && denNgayStr.length === 10) {
                    setTimeout(autoAdjustDates, 10);
                }
            });

            $('.datepicker-trigger').click(function() {
                setTimeout(autoAdjustDates, 100);
            });
        });

        $('#selectGiaiDoan').change(function () {

            const selectedValue = $(this).val();
            const container = $('#selectContainer');
            container.empty();

            if (selectedValue === 'Nam' || selectedValue === 'Ngay') {
                container.css('justify-content', 'flex-start');
            } else if (selectedValue === 'Quy' || selectedValue === 'Thang') {
                container.css('justify-content', 'space-around');
            }

        if (selectedValue === 'Nam' || selectedValue === 'Quy' || selectedValue === 'Thang') {
            $('#tuNgayDesktop, #denNgayDesktop').prop('disabled', true);
        } else {
            $('#tuNgayDesktop, #denNgayDesktop').prop('disabled', false);
        }

            const currentYear = new Date().getFullYear();
            const currentMonth = new Date().getMonth() + 1;
            const currentQuy = Math.ceil(currentMonth / 3);

            function createDropdownInput(id, label, values, defaultValue, onSelect) {
                const html = `
                    <div data-dropdown-wrapper style="width: 45%; position: relative;">
                        <label class="form-label">${label}</label>
                        <input type="number" class="form-control" id="${id}" value="${defaultValue}" autocomplete="off">
                        <div id="${id}Dropdown"
                            style="display:none; position:absolute; top:100%; left:0; width:100%;
                            max-height:200px; overflow-y:auto; z-index:9999; background:white;
                            border:1px solid rgba(0,0,0,.15); border-radius:4px;
                            box-shadow:0 6px 12px rgba(0,0,0,.175);">
                        </div>
                    </div>
                `;
                container.append(html);

                const $input = $('#' + id);
                const $dropdown = $('#' + id + 'Dropdown');
                let currentHighlightIndex = -1;

                function highlightCurrentItem() {
                    const items = $dropdown.find('.dropdown-item');
                    items.removeClass('active bg-primary text-white');
                    if (currentHighlightIndex >= 0 && currentHighlightIndex < items.length) {
                        items.eq(currentHighlightIndex).addClass('active bg-primary text-white');
                        const item = items.eq(currentHighlightIndex)[0];
                        if (item) {
                            item.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                        }
                    }
                }

            function renderList(filter = '') {
                $dropdown.empty();
                currentHighlightIndex = -1;

                const selectedVal = parseInt($input.val(), 10);
                const fallbackVal = defaultValue;
                const selectedOrFallback = Number.isFinite(selectedVal) ? selectedVal : fallbackVal;

                let filteredValues = values.filter(v => !filter || v.toString().includes(filter));

                if (!filteredValues.includes(selectedOrFallback)) {
                    filteredValues.unshift(selectedOrFallback);
                }

                if (filteredValues.length === 0) {
                    $dropdown.append(`<div class="dropdown-item" style="padding:8px 16px; color:#999;"></div>`);
                    return;
                }

                filteredValues.forEach((val, index) => {
                    const isSelected = val === selectedOrFallback;
                    const item = $(`<a href="#" class="dropdown-item ${isSelected ? 'active bg-primary text-white' : ''}"
                                    data-val="${val}" data-index="${index}"
                                    style="padding:8px 16px; display:block; text-decoration:none; color:#333; cursor:pointer;">
                                    ${val}</a>`);
                    item.on('click', function (e) {
                        e.preventDefault();
                        selectItem(val);
                    });
                    item.on('mouseenter', function () {
                        currentHighlightIndex = index;
                        highlightCurrentItem();
                    });
                    $dropdown.append(item);
                    if (isSelected) {
                        currentHighlightIndex = index;
                    }
            });

            const items = $dropdown.find('.dropdown-item');
            if (currentHighlightIndex === -1 && items.length) {
                currentHighlightIndex = 0;
            }
            highlightCurrentItem();
        }

                function selectItem(val) {
                    $input.val(val);
                    $dropdown.hide();
                    if (onSelect) onSelect(val);
                }

                $input.on('focus click', function () {
                    renderList();
                    $dropdown.show();
                });

                $input.on('input', function () {
                    renderList($(this).val());
                    $dropdown.show();
                });

                $input.on('keydown', function (e) {
                    const items = $dropdown.find('.dropdown-item');
                    if (!items.length) return;

                    const key = e.key;
                    const isUp = key === 'ArrowUp';
                    const isDown = key === 'ArrowDown';
                    const isEnter = key === 'Enter';
                    const isEscape = key === 'Escape';
                    const isTab = key === 'Tab';

                    if (isUp || isDown || isEnter || isEscape || isTab) {
                        e.preventDefault();
                    }

                    if (isUp) {
                        currentHighlightIndex = (currentHighlightIndex <= 0) ? items.length - 1 : currentHighlightIndex - 1;
                        highlightCurrentItem();
                        return;
                    }

                    if (isDown) {
                        currentHighlightIndex = (currentHighlightIndex >= items.length - 1) ? 0 : currentHighlightIndex + 1;
                        highlightCurrentItem();
                        return;
                    }

                    if (isEnter && currentHighlightIndex >= 0) {
                        const val = parseInt(items.eq(currentHighlightIndex).data('val'), 10);
                        selectItem(val);
                        return;
                    }

                    if (isEscape) {
                        $dropdown.hide();
                        return;
                    }

                    if (isTab) {
                        if (currentHighlightIndex >= 0) {
                            const val = parseInt(items.eq(currentHighlightIndex).data('val'), 10);
                            selectItem(val);
                        }
                        return;
                    }
                });

                $(document).on('click', function (e) {
                    if (!$(e.target).closest('[data-dropdown-wrapper]').length) {
                        $dropdown.hide();
                    }
                });
            }

            function formatDate(date) {
                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                return `${day}-${month}-${year}`;
            }

            function getMonthDateRange(year, month) {
                const startDate = new Date(year, month - 1, 1);
                const endDate = new Date(year, month, 0);
                return { start: startDate, end: endDate };
            }

        function updateDates()
        {
            const year = parseInt($('#yearInput').val(), 10) || currentYear;

            if (selectedValue === 'Nam') {
                $('#tuNgayDesktop').val(`01-01-${year}`);
                $('#denNgayDesktop').val(`31-12-${year}`);
            }
            else if (selectedValue === 'Quy') {
                let quy = parseInt($('#quyInput').val(), 10) || 1;
                if (quy > 4) quy = 4;
                if (quy < 1) quy = 1;

                const startMonth = (quy - 1) * 3 + 1;
                const endMonth = startMonth + 2;
                $('#tuNgayDesktop').val(formatDate(new Date(year, startMonth - 1, 1)));
                $('#denNgayDesktop').val(formatDate(new Date(year, endMonth, 0)));
            }
            else if (selectedValue === 'Thang') {
                let month = parseInt($('#thangInput').val(), 10) || currentMonth;
                if (month > 12) month = 12;
                if (month < 1) month = 1;

                const { start, end } = getMonthDateRange(year, month);
                $('#tuNgayDesktop').val(formatDate(start));
                $('#denNgayDesktop').val(formatDate(end));
            }



            $('#tuNgayDesktop').datepicker('setDate', $('#tuNgayDesktop').val());
            $('#denNgayDesktop').datepicker('setDate', $('#denNgayDesktop').val());
        }

            createDropdownInput('yearInput', 'Năm', Array.from({ length: currentYear - 1999 }, (_, i) => 2000 + i), currentYear, updateDates);

            if (selectedValue === 'Quy') {
                createDropdownInput('quyInput', 'Quý', [1, 2, 3, 4], currentQuy, updateDates);
            } else if (selectedValue === 'Thang') {
                createDropdownInput('thangInput', 'Tháng', Array.from({ length: 12 }, (_, i) => i + 1), currentMonth, updateDates);
            } else if (selectedValue === 'Ngay') {
                container.empty();
            }

                    if (selectedValue === 'Ngay') {
            const today = new Date();
            const formatted = formatDate(today);
            $('#tuNgayDesktop').val(formatted);
            $('#denNgayDesktop').val(formatted);
            $('#tuNgayDesktop, #denNgayDesktop').prop('disabled', false);
            $('#tuNgayDesktop').datepicker('setDate', formatted);
            $('#denNgayDesktop').datepicker('setDate', formatted);
        } else {
            updateDates();
        }

        });
    </script>
}







